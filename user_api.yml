openapi: 3.0.0
info:
  title: UserSphere REST API
  description: A comprehensive user management REST API built with Flask
  version: 1.0.0
  contact:
    name: UserSphere API Team
    email: api@usersphere.com

servers:
  - url: http://localhost:5000/api
    description: Development server

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all active users
      tags:
        - Users
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  count:
                    type: integer
                  message:
                    type: string
        '500':
          description: Internal server error
    
    post:
      summary: Create a new user
      description: Create a new user account
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        '400':
          description: Bad request or validation error
        '500':
          description: Internal server error

  /users/{user_id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        '404':
          description: User not found
        '500':
          description: Internal server error
    
    put:
      summary: Update user
      description: Update an existing user's information
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        '400':
          description: Bad request or validation error
        '404':
          description: User not found
        '500':
          description: Internal server error
    
    delete:
      summary: Delete user
      description: Delete a user (soft delete)
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: User not found
        '500':
          description: Internal server error

  /users/search:
    get:
      summary: Search users
      description: Search users by name or email
      tags:
        - Users
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  count:
                    type: integer
                  message:
                    type: string
        '400':
          description: Missing search query
        '500':
          description: Internal server error

  /health:
    get:
      summary: Health check
      description: Check if the API is running
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  status:
                    type: string

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        age:
          type: integer
          example: 30
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        age:
          type: integer
          minimum: 1
          maximum: 150
          example: 30
        password:
          type: string
          minLength: 6
          maxLength: 128
          example: "securepassword123"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        age:
          type: integer
          minimum: 1
          maximum: 150
          example: 30
        password:
          type: string
          minLength: 6
          maxLength: 128
          example: "newsecurepassword123"
        is_active:
          type: boolean
          example: true

tags:
  - name: Users
    description: User management operations
  - name: Health
    description: API health check endpoints